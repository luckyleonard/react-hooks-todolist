{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","idSeq","Date","now","Control","memo","props","addTodo","inputRef","useRef","className","onSubmit","e","preventDefault","newText","current","value","trim","length","id","text","complete","type","ref","placeholder","TodoItem","todo","toggleTodo","removeTodo","onChange","checked","onClick","Todos","todos","map","key","TodoList","useState","setTodos","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","useCallback","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,kC,uHCWvCC,G,YAAQC,KAAKC,OAEXC,EAAUC,gBAAK,SAAiBC,GAAQ,IACpCC,EAAYD,EAAZC,QACFC,EAAWC,mBAkBjB,OACE,yBAAKC,UAAU,WACb,yCACA,0BAAMC,SAnBO,SAAAC,GACfA,EAAEC,iBACF,IAAMC,EAAUN,EAASO,QAAQC,MAAMC,OAChB,IAAnBH,EAAQI,SAIZX,EAAQ,CACNY,KAAMlB,EACNmB,KAAMN,EACNO,UAAU,IAGZb,EAASO,QAAQC,MAAQ,MAOrB,2BACEM,KAAK,OACLC,IAAKf,EACLE,UAAU,WACVc,YAAY,gCAOhBC,EAAWpB,gBAAK,SAAkBC,GAAQ,IAAD,EAKzCA,EAHFoB,KAAQP,EAFmC,EAEnCA,GAAIC,EAF+B,EAE/BA,KAAMC,EAFyB,EAEzBA,SAClBM,EAEErB,EAFFqB,WACAC,EACEtB,EADFsB,WAUF,OACE,wBAAIlB,UAAU,aACZ,2BAAOY,KAAK,WAAWO,SATV,WACfF,EAAWR,IAQkCW,QAAST,IACpD,2BAAOX,UAAWW,EAAW,WAAa,IAAKD,GAC/C,4BAAQW,QARK,WACfH,EAAWT,KAOT,YAKAa,EAAQ3B,gBAAK,SAAeC,GAAQ,IAChC2B,EAAkC3B,EAAlC2B,MAAON,EAA2BrB,EAA3BqB,WAAYC,EAAetB,EAAfsB,WAC3B,OACE,4BACGK,EAAMC,KAAI,SAAAR,GACT,OACE,kBAAC,EAAD,CACES,IAAKT,EAAKP,GACVO,KAAMA,EACNC,WAAYA,EACZC,WAAYA,WAuDTQ,MA7Cf,WAAqB,IAAD,EACQC,mBAAS,IADjB,mBACXJ,EADW,KACJK,EADI,KAGlBC,qBAAU,WACR,IAAMN,EAAQO,KAAKC,MAAMC,aAAaC,QAN3B,cAM+C,GAC1DL,EAASL,KACR,IAEHM,qBAAU,WACRG,aAAaE,QAXF,WAWkBJ,KAAKK,UAAUZ,MAC3C,CAACA,IAEJ,IAAM1B,EAAUuC,uBAAY,SAAApB,GAC1BY,GAAS,SAAAL,GAAK,4BAAQA,GAAR,CAAeP,SAC5B,IAEGE,EAAakB,uBAAY,SAAA3B,GAC7BmB,GAAS,SAAAL,GAAK,OACZA,EAAMc,QAAO,SAAArB,GACX,OAAOA,EAAKP,KAAOA,UAGtB,IAEGQ,EAAamB,uBAAY,SAAA3B,GAC7BmB,GAAS,SAAAL,GAAK,OACZA,EAAMC,KAAI,SAAAR,GACR,OAAOA,EAAKP,KAAOA,EAAZ,eAEEO,EAFF,CAGDL,UAAWK,EAAKL,WAElBK,UAGP,IAEH,OACE,yBAAKhB,UAAU,aACb,kBAAC,EAAD,CAASH,QAASA,IAClB,kBAAC,EAAD,CAAOqB,WAAYA,EAAYD,WAAYA,EAAYM,MAAOA,MCvHhDe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.feb80932.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {\n  useEffect,\n  useState,\n  useMemo,\n  useRef,\n  useCallback,\n  memo\n} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nlet idSeq = Date.now(); //time stamp\n\nconst Control = memo(function Control(props) {\n  const { addTodo } = props;\n  const inputRef = useRef();\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newText = inputRef.current.value.trim(); //清除留白\n    if (newText.length === 0) {\n      return; //if empty then not submit\n    }\n\n    addTodo({\n      id: ++idSeq,\n      text: newText,\n      complete: false\n    });\n\n    inputRef.current.value = '';\n  };\n\n  return (\n    <div className='control'>\n      <h1>Todo List</h1>\n      <form onSubmit={onSubmit}>\n        <input\n          type='text'\n          ref={inputRef}\n          className='new-todo'\n          placeholder='What needs to be done?'\n        />\n      </form>\n    </div>\n  );\n});\n\nconst TodoItem = memo(function TodoItem(props) {\n  const {\n    todo: { id, text, complete },\n    toggleTodo,\n    removeTodo\n  } = props;\n\n  const onChange = () => {\n    toggleTodo(id);\n  };\n  const onRemove = () => {\n    removeTodo(id);\n  };\n\n  return (\n    <li className='todo-item'>\n      <input type='checkbox' onChange={onChange} checked={complete} />\n      <label className={complete ? 'complete' : ''}>{text}</label>\n      <button onClick={onRemove}>&#xd7;</button>\n    </li>\n  );\n});\n\nconst Todos = memo(function Todos(props) {\n  const { todos, toggleTodo, removeTodo } = props;\n  return (\n    <ul>\n      {todos.map(todo => {\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            toggleTodo={toggleTodo}\n            removeTodo={removeTodo}\n          />\n        );\n      })}\n    </ul>\n  );\n});\n\nconst LS_KEY = '$-todos_'; //todo list constant\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]); //init\n\n  useEffect(() => {\n    const todos = JSON.parse(localStorage.getItem(LS_KEY)) || '';\n    setTodos(todos);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, JSON.stringify(todos));\n  }, [todos]); //run after todos change\n\n  const addTodo = useCallback(todo => {\n    setTodos(todos => [...todos, todo]);\n  }, []);\n\n  const removeTodo = useCallback(id => {\n    setTodos(todos =>\n      todos.filter(todo => {\n        return todo.id !== id;\n      })\n    );\n  }, []);\n\n  const toggleTodo = useCallback(id => {\n    setTodos(todos =>\n      todos.map(todo => {\n        return todo.id === id\n          ? {\n              ...todo,\n              complete: !todo.complete\n            }\n          : todo;\n      })\n    );\n  }, []);\n\n  return (\n    <div className='todo-list'>\n      <Control addTodo={addTodo} />\n      <Todos removeTodo={removeTodo} toggleTodo={toggleTodo} todos={todos} />\n    </div>\n  );\n}\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}